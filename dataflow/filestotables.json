{
	"name": "filestotables",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "Possite"
				},
				{
					"dataset": {
						"referenceName": "rdllocblob",
						"type": "DatasetReference"
					},
					"name": "rdlLoc"
				},
				{
					"dataset": {
						"referenceName": "prodazure",
						"type": "DatasetReference"
					},
					"name": "prod"
				},
				{
					"dataset": {
						"referenceName": "pricestateazure",
						"type": "DatasetReference"
					},
					"name": "pricestate"
				},
				{
					"dataset": {
						"referenceName": "invstatusazure",
						"type": "DatasetReference"
					},
					"name": "instatus"
				},
				{
					"dataset": {
						"referenceName": "invlocazure",
						"type": "DatasetReference"
					},
					"name": "invloc"
				},
				{
					"dataset": {
						"referenceName": "hldyazure",
						"type": "DatasetReference"
					},
					"name": "hldyazure"
				},
				{
					"dataset": {
						"referenceName": "clndazure",
						"type": "DatasetReference"
					},
					"name": "cldn"
				},
				{
					"dataset": {
						"referenceName": "transazure",
						"type": "DatasetReference"
					},
					"name": "trans"
				},
				{
					"dataset": {
						"referenceName": "avgazure",
						"type": "DatasetReference"
					},
					"name": "avg"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "Possitetable",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "rdllocsnow",
						"type": "DatasetReference"
					},
					"name": "rdlloctable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "prodtable"
				},
				{
					"dataset": {
						"referenceName": "pricestatesnow",
						"type": "DatasetReference"
					},
					"name": "pricestatetable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableinvstatus",
						"type": "DatasetReference"
					},
					"name": "invstatustable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableinvloc",
						"type": "DatasetReference"
					},
					"name": "invloctable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTablehldy",
						"type": "DatasetReference"
					},
					"name": "hldytable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTablecldn",
						"type": "DatasetReference"
					},
					"name": "cldntable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTabletrans",
						"type": "DatasetReference"
					},
					"name": "transtable"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableavg",
						"type": "DatasetReference"
					},
					"name": "avgtable"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          site_id as string,",
				"          site_label as string,",
				"          subchnl_id as string,",
				"          subchnl_label as string,",
				"          chnl_id as string,",
				"          chnl_label as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Possite",
				"source(output(",
				"          str as string,",
				"          str_label as string,",
				"          dstr as string,",
				"          dstr_label as string,",
				"          rgn as string,",
				"          rgn_label as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rdlLoc",
				"source(output(",
				"          sku_id as string,",
				"          sku_label as string,",
				"          stylclr_id as string,",
				"          stylclr_label as string,",
				"          styl_id as string,",
				"          styl_label as string,",
				"          subcat_id as string,",
				"          subcat_label as string,",
				"          cat_id as string,",
				"          cat_label as string,",
				"          dept_id as string,",
				"          dept_label as string,",
				"          issvc as string,",
				"          isasmbly as string,",
				"          isnfs as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> prod",
				"source(output(",
				"          substate_id as string,",
				"          substate_label as string,",
				"          state_id as string,",
				"          state_label as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> pricestate",
				"source(output(",
				"          code_id as string,",
				"          code_label as string,",
				"          bckt_id as string,",
				"          bckt_label as string,",
				"          ownrshp_id as string,",
				"          ownrshp_label as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> instatus",
				"source(output(",
				"          loc as string,",
				"          loc_label as string,",
				"          loctype as string,",
				"          loctype_label as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> invloc",
				"source(output(",
				"          hldy_id as string,",
				"          hldy_label as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hldyazure",
				"source(output(",
				"          fscldt_id as string,",
				"          fscldt_label as string,",
				"          fsclwk_id as string,",
				"          fsclwk_label as string,",
				"          fsclmth_id as string,",
				"          fsclmth_label as string,",
				"          fsclqrtr_id as string,",
				"          fsclqrtr_label as string,",
				"          fsclyr_id as string,",
				"          fsclyr_label as string,",
				"          ssn_id as string,",
				"          ssn_label as string,",
				"          ly_fscldt_id as string,",
				"          lly_fscldt_id as string,",
				"          fscldow as string,",
				"          fscldom as string,",
				"          fscldoq as string,",
				"          fscldoy as string,",
				"          fsclwoy as string,",
				"          fsclmoy as string,",
				"          fsclqoy as string,",
				"          date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> cldn",
				"source(output(",
				"          order_id as string,",
				"          line_id as string,",
				"          type as string,",
				"          dt as string,",
				"          pos_site_id as string,",
				"          sku_id as string,",
				"          fscldt_id as string,",
				"          price_substate_id as string,",
				"          sales_units as string,",
				"          sales_dollars as string,",
				"          discount_dollars as string,",
				"          original_order_id as string,",
				"          original_line_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> trans",
				"source(output(",
				"          fscldt_id as string,",
				"          sku_id as string,",
				"          average_unit_standardcost as string,",
				"          average_unit_landedcost as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> avg",
				"Possite sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SITE_ID as string,",
				"          SITE_LABEL as string,",
				"          CHNL_ID as string,",
				"          CHNL_LABEL as string,",
				"          SUBCHNL_ID as string,",
				"          SUBCHNL_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SITE_ID = site_id,",
				"          SITE_LABEL = site_label,",
				"          CHNL_ID = chnl_id,",
				"          CHNL_LABEL = chnl_label,",
				"          SUBCHNL_ID = subchnl_id,",
				"          SUBCHNL_LABEL = subchnl_label",
				"     )) ~> Possitetable",
				"rdlLoc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STR as string,",
				"          STR_LABEL as string,",
				"          DSTR as string,",
				"          DSTR_LABEL as string,",
				"          RGN as string,",
				"          RGN_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          STR = str,",
				"          STR_LABEL = str_label,",
				"          DSTR = dstr,",
				"          DSTR_LABEL = dstr_label,",
				"          RGN = rgn,",
				"          RGN_LABEL = rgn_label",
				"     )) ~> rdlloctable",
				"prod sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SKU_ID as string,",
				"          SKU_LABEL as string,",
				"          STYLCLR_ID as string,",
				"          STYLCLR_LABEL as string,",
				"          STYL_ID as string,",
				"          STYL_LABEL as string,",
				"          CAT_ID as string,",
				"          CAT_LABEL as string,",
				"          SUBCAT_ID as string,",
				"          SUBCAT_LABEL as string,",
				"          DEPT_ID as string,",
				"          DEPT_LABEL as string,",
				"          ISSVC as string,",
				"          ISASMBLY as string,",
				"          ISNFS as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SKU_ID = sku_id,",
				"          SKU_LABEL = sku_label,",
				"          STYLCLR_ID = stylclr_id,",
				"          STYLCLR_LABEL = stylclr_label,",
				"          STYL_ID = styl_id,",
				"          STYL_LABEL = styl_label,",
				"          CAT_ID = cat_id,",
				"          CAT_LABEL = cat_label,",
				"          SUBCAT_ID = subcat_id,",
				"          SUBCAT_LABEL = subcat_label,",
				"          DEPT_ID = dept_id,",
				"          DEPT_LABEL = dept_label,",
				"          ISSVC = issvc,",
				"          ISASMBLY = isasmbly,",
				"          ISNFS = isnfs",
				"     )) ~> prodtable",
				"pricestate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STATE_ID as string,",
				"          STATE_LABEL as string,",
				"          SUBSTATE_ID as string,",
				"          SUBSTATE_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 4,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SUBSTATE_ID = substate_id,",
				"          SUBSTATE_LABEL = substate_label,",
				"          STATE_ID = state_id,",
				"          STATE_LABEL = state_label",
				"     )) ~> pricestatetable",
				"instatus sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CODE_ID as string,",
				"          CODE_LABEL as string,",
				"          BCKT_ID as string,",
				"          BCKT_LABEL as string,",
				"          OWNRSHP_ID as string,",
				"          OWNRSHP_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 5,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CODE_ID = code_id,",
				"          CODE_LABEL = code_label,",
				"          BCKT_ID = bckt_id,",
				"          BCKT_LABEL = bckt_label,",
				"          OWNRSHP_ID = ownrshp_id,",
				"          OWNRSHP_LABEL = ownrshp_label",
				"     )) ~> invstatustable",
				"invloc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOC as string,",
				"          LOC_LABEL as string,",
				"          LOCTYPE as string,",
				"          LOCTYPE_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 6,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LOC = loc,",
				"          LOC_LABEL = loc_label,",
				"          LOCTYPE = loctype,",
				"          LOCTYPE_LABEL = loctype_label",
				"     )) ~> invloctable",
				"hldyazure sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          HLDY_ID as string,",
				"          HLDY_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 7,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          HLDY_LABEL = hldy_label,",
				"          HLDY_ID = hldy_id",
				"     )) ~> hldytable",
				"cldn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FSCLDT_ID as string,",
				"          FSCLDT_LABEL as string,",
				"          FSCLWK_ID as string,",
				"          FSCLWK_LABEL as string,",
				"          FSCLMTH_ID as string,",
				"          FSCLMTH_LABEL as string,",
				"          FSCLQRTR_ID as string,",
				"          FSCLQRTR_LABEL as string,",
				"          FSCLYR_ID as string,",
				"          FSCLYR_LABEL as string,",
				"          SSN_ID as string,",
				"          SSN_LABEL as string,",
				"          LY_FSCLDT_ID as string,",
				"          LLY_FSCLDT_ID as string,",
				"          FSCLDOW as string,",
				"          FSCLDOM as string,",
				"          FSCLDOQ as string,",
				"          FSCLDOY as string,",
				"          FSCLWOY as string,",
				"          FSCLMOY as string,",
				"          FSCLQOY as string,",
				"          DATE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 8,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FSCLDT_ID = fscldt_id,",
				"          FSCLDT_LABEL = fscldt_label,",
				"          FSCLWK_ID = fsclwk_id,",
				"          FSCLWK_LABEL = fsclwk_label,",
				"          FSCLMTH_ID = fsclmth_id,",
				"          FSCLMTH_LABEL = fsclmth_label,",
				"          FSCLQRTR_ID = fsclqrtr_id,",
				"          FSCLQRTR_LABEL = fsclqrtr_label,",
				"          FSCLYR_ID = fsclyr_id,",
				"          FSCLYR_LABEL = fsclyr_label,",
				"          SSN_ID = ssn_id,",
				"          SSN_LABEL = ssn_label,",
				"          LY_FSCLDT_ID = ly_fscldt_id,",
				"          LLY_FSCLDT_ID = lly_fscldt_id,",
				"          FSCLDOW = fscldow,",
				"          FSCLDOM = fscldom,",
				"          FSCLDOQ = fscldoq,",
				"          FSCLDOY = fscldoy,",
				"          FSCLWOY = fsclwoy,",
				"          FSCLMOY = fsclmoy,",
				"          FSCLQOY = fsclqoy,",
				"          DATE = date",
				"     )) ~> cldntable",
				"trans sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as string,",
				"          LINE_ID as string,",
				"          TYPE as string,",
				"          DT as string,",
				"          POS_SITE_ID as string,",
				"          SKU_ID as string,",
				"          FSCLDT_ID as string,",
				"          PRICE_SUBSTATE_ID as string,",
				"          SALES_UNITS as string,",
				"          SALES_DOLLARS as string,",
				"          DISCOUNT_DOLLARS as string,",
				"          ORIGINAL_ORDER_ID as string,",
				"          ORIGINAL_LINE_ID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 9,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          ORDER_ID = order_id,",
				"          LINE_ID = line_id,",
				"          TYPE = type,",
				"          DT = dt,",
				"          POS_SITE_ID = pos_site_id,",
				"          SKU_ID = sku_id,",
				"          FSCLDT_ID = fscldt_id,",
				"          PRICE_SUBSTATE_ID = price_substate_id,",
				"          SALES_UNITS = sales_units,",
				"          SALES_DOLLARS = sales_dollars,",
				"          DISCOUNT_DOLLARS = discount_dollars,",
				"          ORIGINAL_ORDER_ID = original_order_id,",
				"          ORIGINAL_LINE_ID = original_line_id",
				"     )) ~> transtable",
				"avg sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FSCLDT_ID as string,",
				"          SKU_ID as string,",
				"          AVERAGE_UNIT_STANDARDCOST as string,",
				"          AVERAGE_UNIT_LANDEDCOST as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 10,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FSCLDT_ID = fscldt_id,",
				"          SKU_ID = sku_id,",
				"          AVERAGE_UNIT_STANDARDCOST = average_unit_standardcost,",
				"          AVERAGE_UNIT_LANDEDCOST = average_unit_landedcost",
				"     )) ~> avgtable"
			]
		}
	}
}