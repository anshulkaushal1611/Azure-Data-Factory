{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "rdllocsnow",
						"type": "DatasetReference"
					},
					"name": "inrlloc"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "inprod"
				},
				{
					"dataset": {
						"referenceName": "pricestatesnow",
						"type": "DatasetReference"
					},
					"name": "inpricestate"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "inpossite"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableinvstatus",
						"type": "DatasetReference"
					},
					"name": "instatus"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableinvloc",
						"type": "DatasetReference"
					},
					"name": "inivloc"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTablehldy",
						"type": "DatasetReference"
					},
					"name": "Inhldy"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTablecldn",
						"type": "DatasetReference"
					},
					"name": "inclnd"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTabletrans",
						"type": "DatasetReference"
					},
					"name": "intrans"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableavg",
						"type": "DatasetReference"
					},
					"name": "Inavg"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "intostgrlloc",
						"type": "DatasetReference"
					},
					"name": "Stgrlloc"
				},
				{
					"dataset": {
						"referenceName": "intostgprod",
						"type": "DatasetReference"
					},
					"name": "stgprod"
				},
				{
					"dataset": {
						"referenceName": "intostgpricestate",
						"type": "DatasetReference"
					},
					"name": "stgpricestate",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostgpossite",
						"type": "DatasetReference"
					},
					"name": "stgpossite",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostgstatus",
						"type": "DatasetReference"
					},
					"name": "stgstatus",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostginvloc",
						"type": "DatasetReference"
					},
					"name": "Stginvloc",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostghldy",
						"type": "DatasetReference"
					},
					"name": "Stghldy",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostgclnd",
						"type": "DatasetReference"
					},
					"name": "Stgclnd",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostgtrans",
						"type": "DatasetReference"
					},
					"name": "Stgtrans",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "intostgavg",
						"type": "DatasetReference"
					},
					"name": "stgavg",
					"rejectedDataLinkedService": {
						"referenceName": "Challengeinputlinkedservice",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          STR as string,",
				"          STR_LABEL as string,",
				"          DSTR as string,",
				"          DSTR_LABEL as string,",
				"          RGN as string,",
				"          RGN_LABEL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from DIM_RTLLOC where str is not null or dstr is not null or rgn is not null',",
				"     format: 'query') ~> inrlloc",
				"source(output(",
				"          SKU_ID as string,",
				"          SKU_LABEL as string,",
				"          STYLCLR_ID as string,",
				"          STYLCLR_LABEL as string,",
				"          STYL_ID as string,",
				"          STYL_LABEL as string,",
				"          CAT_ID as string,",
				"          CAT_LABEL as string,",
				"          SUBCAT_ID as string,",
				"          SUBCAT_LABEL as string,",
				"          DEPT_ID as string,",
				"          DEPT_LABEL as string,",
				"          ISSVC as string,",
				"          ISASMBLY as string,",
				"          ISNFS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from Dim_prod where sku_id is not null',",
				"     format: 'query') ~> inprod",
				"source(output(",
				"          STATE_ID as string,",
				"          STATE_LABEL as string,",
				"          SUBSTATE_ID as string,",
				"          SUBSTATE_LABEL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from Dim_pricestate where state_id is not null',",
				"     format: 'query') ~> inpricestate",
				"source(output(",
				"          SITE_ID as string,",
				"          SITE_LABEL as string,",
				"          CHNL_ID as string,",
				"          CHNL_LABEL as string,",
				"          SUBCHNL_ID as string,",
				"          SUBCHNL_LABEL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from Dim_possite where site_id is not null',",
				"     format: 'query') ~> inpossite",
				"source(output(",
				"          CODE_ID as string,",
				"          CODE_LABEL as string,",
				"          BCKT_ID as string,",
				"          BCKT_LABEL as string,",
				"          OWNRSHP_ID as string,",
				"          OWNRSHP_LABEL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from DIM_INVSTATUS where code_id is not null',",
				"     format: 'query') ~> instatus",
				"source(output(",
				"          LOC as string,",
				"          LOC_LABEL as string,",
				"          LOCTYPE as string,",
				"          LOCTYPE_LABEL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from Dim_invloc where loc is not null',",
				"     format: 'query') ~> inivloc",
				"source(output(",
				"          HLDY_ID as string,",
				"          HLDY_LABEL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from DIM_HLDY where hldy_id is not null',",
				"     format: 'query') ~> Inhldy",
				"source(output(",
				"          FSCLDT_ID as string,",
				"          FSCLDT_LABEL as string,",
				"          FSCLWK_ID as string,",
				"          FSCLWK_LABEL as string,",
				"          FSCLMTH_ID as string,",
				"          FSCLMTH_LABEL as string,",
				"          FSCLQRTR_ID as string,",
				"          FSCLQRTR_LABEL as string,",
				"          FSCLYR_ID as string,",
				"          FSCLYR_LABEL as string,",
				"          SSN_ID as string,",
				"          SSN_LABEL as string,",
				"          LY_FSCLDT_ID as string,",
				"          LLY_FSCLDT_ID as string,",
				"          FSCLDOW as string,",
				"          FSCLDOM as string,",
				"          FSCLDOQ as string,",
				"          FSCLDOY as string,",
				"          FSCLWOY as string,",
				"          FSCLMOY as string,",
				"          FSCLQOY as string,",
				"          DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from Dim_clnd where fscldt_id is not null',",
				"     format: 'query') ~> inclnd",
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ID as string,",
				"          TYPE as string,",
				"          DT as string,",
				"          POS_SITE_ID as string,",
				"          SKU_ID as string,",
				"          FSCLDT_ID as string,",
				"          PRICE_SUBSTATE_ID as string,",
				"          SALES_UNITS as string,",
				"          SALES_DOLLARS as string,",
				"          DISCOUNT_DOLLARS as string,",
				"          ORIGINAL_ORDER_ID as string,",
				"          ORIGINAL_LINE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from fact_trans where \\norder_id is not null and\\nline_id is not null and\\ntype is not null and\\npos_site_id is not null and\\nsku_id is not null and\\nfscldt_id is not null and\\nprice_substate_id is not null',",
				"     format: 'query') ~> intrans",
				"source(output(",
				"          FSCLDT_ID as string,",
				"          SKU_ID as string,",
				"          AVERAGE_UNIT_STANDARDCOST as string,",
				"          AVERAGE_UNIT_LANDEDCOST as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from FACT_AVG\\nwhere fscldt_id is not null or sku_id is not null',",
				"     format: 'query') ~> Inavg",
				"inrlloc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_STR as string,",
				"          STG_STR_LABEL as string,",
				"          STG_DSTR as string,",
				"          STG_DSTR_LABEL as string,",
				"          STG_RGN as string,",
				"          STG_RGN_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          STG_STR = STR,",
				"          STG_STR_LABEL = STR_LABEL,",
				"          STG_DSTR = DSTR,",
				"          STG_DSTR_LABEL = DSTR_LABEL,",
				"          STG_RGN = RGN,",
				"          STG_RGN_LABEL = RGN_LABEL",
				"     )) ~> Stgrlloc",
				"inprod sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_SKU_ID as string,",
				"          STG_SKU_LABEL as string,",
				"          STG_STYLCLR_ID as string,",
				"          STG_STYLCLR_LABEL as string,",
				"          STG_STYL_ID as string,",
				"          STG_STYL_LABEL as string,",
				"          STG_CAT_ID as string,",
				"          STG_CAT_LABEL as string,",
				"          STG_SUBCAT_ID as string,",
				"          STG_SUBCAT_LABEL as string,",
				"          STG_DEPT_ID as string,",
				"          STG_DEPT_LABEL as string,",
				"          STG_ISSVC as string,",
				"          STG_ISASMBLY as string,",
				"          STG_ISNFS as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          STG_SKU_ID = SKU_ID,",
				"          STG_SKU_LABEL = SKU_LABEL,",
				"          STG_STYLCLR_ID = STYLCLR_ID,",
				"          STG_STYLCLR_LABEL = STYLCLR_LABEL,",
				"          STG_STYL_ID = STYL_ID,",
				"          STG_STYL_LABEL = STYL_LABEL,",
				"          STG_CAT_ID = CAT_ID,",
				"          STG_CAT_LABEL = CAT_LABEL,",
				"          STG_SUBCAT_ID = SUBCAT_ID,",
				"          STG_SUBCAT_LABEL = SUBCAT_LABEL,",
				"          STG_DEPT_ID = DEPT_ID,",
				"          STG_DEPT_LABEL = DEPT_LABEL,",
				"          STG_ISSVC = ISSVC,",
				"          STG_ISASMBLY = ISASMBLY,",
				"          STG_ISNFS = ISNFS",
				"     )) ~> stgprod",
				"inpricestate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_STATE_ID as string,",
				"          STG_STATE_LABEL as string,",
				"          STG_SUBSTATE_ID as string,",
				"          STG_SUBSTATE_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STG_STATE_ID = STATE_ID,",
				"          STG_STATE_LABEL = STATE_LABEL,",
				"          STG_SUBSTATE_ID = SUBSTATE_ID,",
				"          STG_SUBSTATE_LABEL = SUBSTATE_LABEL",
				"     )) ~> stgpricestate",
				"inpossite sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_SITE_ID as string,",
				"          STG_SITE_LABEL as string,",
				"          STG_CHNL_ID as string,",
				"          STG_CHNL_LABEL as string,",
				"          STG_SUBCHNL_ID as string,",
				"          STG_SUBCHNL_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STG_SITE_ID = SITE_ID,",
				"          STG_SITE_LABEL = SITE_LABEL,",
				"          STG_CHNL_ID = CHNL_ID,",
				"          STG_CHNL_LABEL = CHNL_LABEL,",
				"          STG_SUBCHNL_ID = SUBCHNL_ID,",
				"          STG_SUBCHNL_LABEL = SUBCHNL_LABEL",
				"     )) ~> stgpossite",
				"instatus sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_CODE_ID as string,",
				"          STG_CODE_LABEL as string,",
				"          STG_BCKT_ID as string,",
				"          STG_BCKT_LABEL as string,",
				"          STG_OWNRSHP_ID as string,",
				"          STG_OWNRSHP_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STG_CODE_ID = CODE_ID,",
				"          STG_CODE_LABEL = CODE_LABEL,",
				"          STG_BCKT_ID = BCKT_ID,",
				"          STG_BCKT_LABEL = BCKT_LABEL,",
				"          STG_OWNRSHP_ID = OWNRSHP_ID,",
				"          STG_OWNRSHP_LABEL = OWNRSHP_LABEL",
				"     )) ~> stgstatus",
				"inivloc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_LOC as string,",
				"          STG_LOC_LABEL as string,",
				"          STG_LOCTYPE as string,",
				"          STG_LOCTYPE_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STG_LOC = LOC,",
				"          STG_LOC_LABEL = LOC_LABEL,",
				"          STG_LOCTYPE = LOCTYPE,",
				"          STG_LOCTYPE_LABEL = LOCTYPE_LABEL",
				"     )) ~> Stginvloc",
				"Inhldy sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_HLDY_ID as string,",
				"          STG_HLDY_LABEL as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STG_HLDY_ID = HLDY_ID,",
				"          STG_HLDY_LABEL = HLDY_LABEL",
				"     )) ~> Stghldy",
				"inclnd sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STG_FSCLDT_ID as string,",
				"          STG_FSCLDT_LABEL as string,",
				"          STG_FSCLWK_ID as string,",
				"          STG_FSCLWK_LABEL as string,",
				"          STG_FSCLMTH_ID as string,",
				"          STG_FSCLMTH_LABEL as string,",
				"          STG_FSCLQRTR_ID as string,",
				"          STG_FSCLQRTR_LABEL as string,",
				"          STG_FSCLYR_ID as string,",
				"          STG_FSCLYR_LABEL as string,",
				"          STG_SSN_ID as string,",
				"          STG_SSN_LABEL as string,",
				"          STG_LY_FSCLDT_ID as string,",
				"          STG_LLY_FSCLDT_ID as string,",
				"          STG_FSCLDOW as string,",
				"          STG_FSCLDOM as string,",
				"          STG_FSCLDOQ as string,",
				"          STG_FSCLDOY as string,",
				"          STG_FSCLWOY as string,",
				"          STG_FSCLMOY as string,",
				"          STG_FSCLQOY as string,",
				"          STG_DATE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STG_FSCLDT_ID = FSCLDT_ID,",
				"          STG_FSCLDT_LABEL = FSCLDT_LABEL,",
				"          STG_FSCLWK_ID = FSCLWK_ID,",
				"          STG_FSCLWK_LABEL = FSCLWK_LABEL,",
				"          STG_FSCLMTH_ID = FSCLMTH_ID,",
				"          STG_FSCLMTH_LABEL = FSCLMTH_LABEL,",
				"          STG_FSCLQRTR_ID = FSCLQRTR_ID,",
				"          STG_FSCLQRTR_LABEL = FSCLQRTR_LABEL,",
				"          STG_FSCLYR_ID = FSCLYR_ID,",
				"          STG_FSCLYR_LABEL = FSCLYR_LABEL,",
				"          STG_SSN_ID = SSN_ID,",
				"          STG_SSN_LABEL = SSN_LABEL,",
				"          STG_LY_FSCLDT_ID = LY_FSCLDT_ID,",
				"          STG_LLY_FSCLDT_ID = LLY_FSCLDT_ID,",
				"          STG_FSCLDOW = FSCLDOW,",
				"          STG_FSCLDOM = FSCLDOM,",
				"          STG_FSCLDOQ = FSCLDOQ,",
				"          STG_FSCLDOY = FSCLDOY,",
				"          STG_FSCLWOY = FSCLWOY,",
				"          STG_FSCLMOY = FSCLMOY,",
				"          STG_FSCLQOY = FSCLQOY,",
				"          STG_DATE = DATE",
				"     )) ~> Stgclnd",
				"intrans sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STGF_ORDER_ID as string,",
				"          STGF_LINE_ID as string,",
				"          STGF_TYPE as string,",
				"          STGF_DT as string,",
				"          STGF_POS_SITE_ID as string,",
				"          STGF_SKU_ID as string,",
				"          STGF_FSCLDT_ID as string,",
				"          STGF_PRICE_SUBSTATE_ID as string,",
				"          STGF_SALES_UNITS as string,",
				"          STGF_SALES_DOLLARS as string,",
				"          STGF_DISCOUNT_DOLLARS as string,",
				"          STGF_ORIGINAL_ORDER_ID as string,",
				"          STGF_ORIGINAL_LINE_ID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STGF_ORDER_ID = ORDER_ID,",
				"          STGF_LINE_ID = LINE_ID,",
				"          STGF_TYPE = TYPE,",
				"          STGF_DT = DT,",
				"          STGF_POS_SITE_ID = POS_SITE_ID,",
				"          STGF_SKU_ID = SKU_ID,",
				"          STGF_FSCLDT_ID = FSCLDT_ID,",
				"          STGF_PRICE_SUBSTATE_ID = PRICE_SUBSTATE_ID,",
				"          STGF_SALES_UNITS = SALES_UNITS,",
				"          STGF_SALES_DOLLARS = SALES_DOLLARS,",
				"          STGF_DISCOUNT_DOLLARS = DISCOUNT_DOLLARS,",
				"          STGF_ORIGINAL_ORDER_ID = ORIGINAL_ORDER_ID,",
				"          STGF_ORIGINAL_LINE_ID = ORIGINAL_LINE_ID",
				"     )) ~> Stgtrans",
				"Inavg sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STGF_FSCLDT_ID as string,",
				"          STGF_SKU_ID as string,",
				"          STGF_AVERAGE_UNIT_STANDARDCOST as string,",
				"          STGF_AVERAGE_UNIT_LANDEDCOST as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'gyserngyinptfile',",
				"     mapColumn(",
				"          STGF_FSCLDT_ID = FSCLDT_ID,",
				"          STGF_SKU_ID = SKU_ID,",
				"          STGF_AVERAGE_UNIT_STANDARDCOST = AVERAGE_UNIT_STANDARDCOST,",
				"          STGF_AVERAGE_UNIT_LANDEDCOST = AVERAGE_UNIT_LANDEDCOST",
				"     )) ~> stgavg"
			]
		}
	}
}